# -*- coding: utf-8 -*-
"""ReplayPattern.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BFVjBhemFJPBBkQ_9qcDIT0b7e44tK-_
"""

!pip install scikit-learn numpy

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.datasets import fetch_california_housing
from sklearn.utils import shuffle
import numpy as np
import random

class ReplayBuffer:
  def __init__(self,capacity):
    self.capacity= capacity
    self.buffer=[]
    self.position=0
  def add(self,data):
    if len(self.buffer)>= self.capacity:
      self.buffer.pop(0)
    self.buffer.append(data)

  def sample(self,batch_size):
    return random.sample(self.buffer,min(len(self.buffer),batch_size))

#Load and preprocess the dataset

data= fetch_california_housing()
X,y= shuffle(data.data, data.target,random_state=42)

#Normalize feature values
X= (X-X.mean(axis=0))/X.std(axis=0)

#Split into train(80%) and test(20%)

split= int(0.8*len(X))
X_train, X_test= X[:split], X[split:]
y_train, y_test= y[:split], y[split:]

#Create Batches to Simulate Experience

#divide training data into mini batches(experiences)

def create_batches(X,y, batch_size=500):
  batches=[]
  for i in range(0,len(X),batch_size):
    batches.append((X[i:i+batch_size],y[i:i+batch_size]))
  return batches

batches= create_batches(X_train,y_train)

#Initialize model

model= LinearRegression()
buffer= ReplayBuffer(capacity=5)

# Simulate training with replay pattern
for step, batch in enumerate(batches):
    print(f"\nStep {step + 1} - Adding new experience")

    # Add current batch to buffer
    buffer.add(batch)

    # Sample batches from buffer
    sampled_batches = buffer.sample(batch_size=3)

    # Retrain model from scratch on sampled data
    for data in sampled_batches:
        X_batch, y_batch = data
        model.fit(X_batch, y_batch)

    # Evaluate on test data
    y_pred = model.predict(X_test)
    mse = mean_squared_error(y_test, y_pred)
    print(f"MSE on test data: {mse:.4f}")